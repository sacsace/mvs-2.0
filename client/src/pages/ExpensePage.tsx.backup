import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Grid,
  Tabs,
  Tab,
  Snackbar,
  Alert,
  CircularProgress,
  Divider,
  Card,
  CardContent
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Visibility as ViewIcon,
  CheckCircle as ApproveIcon,
  Cancel as RejectIcon,
  Receipt as ReceiptIcon
} from '@mui/icons-material';

interface ExpenseItem {
  id: string;
  invoice_date: string;
  product_name: string;
  description: string;
  quantity: number;
  unit_price: number;
  total_price: number;
}

interface Company {
  id: number;
  name: string;
  gst_number: string;
  bank_name: string;
  ifsc_code: string;
  account_number: string;
  account_holder: string;
}

interface Expense {
  id: number;
  voucher_no: string;
  company_id: number;
  company?: Company;
  department: string;
  total_amount: number;
  igst_amount: number;
  cgst_amount: number;
  sgst_amount: number;
  tds_amount: number;
  grand_total: number;
  status: 'draft' | 'pending' | 'approved' | 'rejected';
  priority: 'low' | 'medium' | 'high';
  requester_id: number;
  approver_id: number;
  payment_date: string;
  payment_status: string;
  remarks: string;
  created_at: string;
  updated_at: string;
  Requester?: { username: string };
  Approver?: { username: string };
  Items?: ExpenseItem[];
}

interface User {
  id: number;
  username: string;
  userid: string;
}

const ExpensePage: React.FC = () => {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [tabValue, setTabValue] = useState(0);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [viewDialogOpen, setViewDialogOpen] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [approveDialogOpen, setApproveDialogOpen] = useState(false);
  const [selectedExpense, setSelectedExpense] = useState<Expense | null>(null);
  const [editingExpense, setEditingExpense] = useState<Expense | null>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as any });
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [priorityFilter, setPriorityFilter] = useState<string>('');

  const [companies, setCompanies] = useState<Company[]>([]);
  const [formData, setFormData] = useState({
    voucher_no: '',
    company_id: '',
    department: '',
    priority: 'medium' as 'low' | 'medium' | 'high',
    approver_id: '',
    payment_date: '',
    payment_status: '',
    remarks: '',
    igst_rate: 18,
    cgst_rate: 9,
    sgst_rate: 9,
    tds_rate: 1,
    items: [{ 
      id: '1', 
      invoice_date: new Date().toISOString().split('T')[0],
      product_name: '', 
      description: '', 
      quantity: 1, 
      unit_price: 0, 
      total_price: 0 
    }]
  });

  // Helper functions
  const calculateTotal = () => {
    return formData.items.reduce((sum, item) => sum + item.total_price, 0);
  };

  const calculateIGST = () => {
    return calculateTotal() * (formData.igst_rate / 100);
  };

  const calculateCGST = () => {
    return calculateTotal() * (formData.cgst_rate / 100);
  };

  const calculateSGST = () => {
    return calculateTotal() * (formData.sgst_rate / 100);
  };

  const calculateTDS = () => {
    return calculateTotal() * (formData.tds_rate / 100);
  };

  const calculateGrandTotal = () => {
    const total = calculateTotal();
    const igst = calculateIGST();
    const cgst = calculateCGST();
    const sgst = calculateSGST();
    const tds = calculateTDS();
    return igst + cgst + sgst - (total - tds);
  };

  const addItem = () => {
    const newItem = {
      id: Date.now().toString(),
      invoice_date: new Date().toISOString().split('T')[0],
      product_name: '',
      description: '',
      quantity: 1,
      unit_price: 0,
      total_price: 0
    };
    setFormData({ ...formData, items: [...formData.items, newItem] });
  };

  const updateItem = (index: number, field: keyof ExpenseItem, value: any) => {
    const newItems = [...formData.items];
    newItems[index] = { ...newItems[index], [field]: value };
    
    // 수량이나 단가가 변경되면 합계 자동 계산
    if (field === 'quantity' || field === 'unit_price') {
      newItems[index].total_price = newItems[index].quantity * newItems[index].unit_price;
    }
    
    // 마지막 항목에 내용이 입력되면 자동으로 새 라인 추가
    if (index === newItems.length - 1 && 
        (field === 'product_name' || field === 'description') && 
        value && 
        (field === 'product_name' ? value.trim() : true)) {
      const newItem = {
        id: Date.now().toString(),
        invoice_date: new Date().toISOString().split('T')[0],
        product_name: '',
        description: '',
        quantity: 1,
        unit_price: 0,
        total_price: 0
      };
      newItems.push(newItem);
    }
    
    setFormData({ ...formData, items: newItems });
  };

  const removeItem = (index: number) => {
    const newItems = formData.items.filter((_, i) => i !== index);
    setFormData({ ...formData, items: newItems });
  };

  const getStatusText = (status: string) => {
    const statusMap: { [key: string]: string } = {
      draft: '초안',
      pending: '승인 대기',
      approved: '승인됨',
      rejected: '거부됨'
    };
    return statusMap[status] || status;
  };

  const getPriorityText = (priority: string) => {
    const priorityMap: { [key: string]: string } = {
      low: '낮음 (30일 이내 지급 요청)',
      medium: '보통 (10일 이내 지급 요청)',
      high: '높음 (2일 이내 지급 요청)'
    };
    return priorityMap[priority] || priority;
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ko-KR');
  };

  // API calls
  const fetchExpenses = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '10',
        type: tabValue === 0 ? 'requested' : 'received',
        ...(searchTerm && { search: searchTerm }),
        ...(statusFilter && { status: statusFilter }),
        ...(priorityFilter && { priority: priorityFilter })
      });

      const response = await fetch(`/api/expenses?${params}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setExpenses(result.data);
          setTotalPages(Math.ceil(result.total / 10));
        }
      }
    } catch (error) {
      console.error('지출결의서 조회 오류:', error);
    } finally {
      setLoading(false);
    }
  }, [currentPage, tabValue, searchTerm, statusFilter, priorityFilter]);

  const fetchUsers = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/users', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const result = await response.json();
        console.log('사용자 조회 결과:', result);
        if (result.success) {
          setUsers(result.data);
          console.log('설정된 사용자 목록:', result.data);
        }
      } else {
        console.error('사용자 조회 실패:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('사용자 조회 오류:', error);
    }
  };

  const fetchCompanies = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/suppliers', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setCompanies(result.data);
        }
      }
    } catch (error) {
      console.error('공급업체 조회 오류:', error);
    }
  };

  useEffect(() => {
    fetchExpenses();
    fetchUsers();
    fetchCompanies();
  }, [fetchExpenses]);

  // Event handlers
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
    setCurrentPage(1);
  };

  const handleDialogOpen = () => {
    setDialogOpen(true);
    setEditingExpense(null);
    setFormData({
      voucher_no: '',
      company_id: '',
      department: '',
      priority: 'medium',
      approver_id: '',
      payment_date: '',
      payment_status: '',
      remarks: '',
      igst_rate: 18,
      cgst_rate: 9,
      sgst_rate: 9,
      tds_rate: 1,
      items: [{ 
        id: '1', 
        invoice_date: new Date().toISOString().split('T')[0],
        product_name: '', 
        description: '', 
        quantity: 1, 
        unit_price: 0, 
        total_price: 0 
      }]
    });
    // 다이얼로그 열 때 사용자 목록 새로고침
    fetchUsers();
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
    setEditingExpense(null);
  };

  const handleViewDialogOpen = (expense: Expense) => {
    setSelectedExpense(expense);
    setViewDialogOpen(true);
  };

  const handleViewDialogClose = () => {
    setViewDialogOpen(false);
    setSelectedExpense(null);
  };

  const handleDeleteDialogOpen = (expense: Expense) => {
    setSelectedExpense(expense);
    setDeleteDialogOpen(true);
  };

  const handleDeleteDialogClose = () => {
    setDeleteDialogOpen(false);
    setSelectedExpense(null);
  };

  const handleApproveDialogOpen = (expense: Expense) => {
    setSelectedExpense(expense);
    setApproveDialogOpen(true);
  };

  const handleApproveDialogClose = () => {
    setApproveDialogOpen(false);
    setSelectedExpense(null);
  };

  const handleSubmit = async () => {
    try {
      const token = localStorage.getItem('token');
      const expenseData = {
        ...formData,
        total_amount: calculateTotal(),
        igst_amount: calculateIGST(),
        cgst_amount: calculateCGST(),
        sgst_amount: calculateSGST(),
        tds_amount: calculateTDS(),
        grand_total: calculateGrandTotal(),
        items: formData.items
      };

      const url = editingExpense 
        ? `/api/expenses/${editingExpense.id}`
        : '/api/expenses';
      
      const method = editingExpense ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(expenseData)
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setSnackbar({
            open: true,
            message: editingExpense ? '지출결의서가 수정되었습니다.' : '지출결의서가 작성되었습니다.',
            severity: 'success'
          });
          handleDialogClose();
          fetchExpenses();
        }
      }
    } catch (error) {
      console.error('지출결의서 저장 오류:', error);
      setSnackbar({
        open: true,
        message: '오류가 발생했습니다.',
        severity: 'error'
      });
    }
  };

  const handleDelete = async () => {
    if (!selectedExpense) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/expenses/${selectedExpense.id}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setSnackbar({
            open: true,
            message: '지출결의서가 삭제되었습니다.',
            severity: 'success'
          });
          handleDeleteDialogClose();
          fetchExpenses();
        }
      }
    } catch (error) {
      console.error('지출결의서 삭제 오류:', error);
      setSnackbar({
        open: true,
        message: '오류가 발생했습니다.',
        severity: 'error'
      });
    }
  };

  const handleApprove = async (status: 'approved' | 'rejected') => {
    if (!selectedExpense) return;

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/expenses/${selectedExpense.id}/approve`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ status })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          setSnackbar({
            open: true,
            message: status === 'approved' ? '지출결의서가 승인되었습니다.' : '지출결의서가 거부되었습니다.',
            severity: 'success'
          });
          handleApproveDialogClose();
          fetchExpenses();
        }
      }
    } catch (error) {
      console.error('지출결의서 승인/거부 오류:', error);
      setSnackbar({
        open: true,
        message: '오류가 발생했습니다.',
        severity: 'error'
      });
    }
  };

  const handleSnackbarClose = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight={400}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
        <Typography variant="h6" fontWeight={700} fontSize="0.85rem">지출관리</Typography>
        <Button 
          variant="contained" 
          startIcon={<AddIcon />} 
          onClick={handleDialogOpen} 
          sx={{ fontSize: '0.8rem', textTransform: 'none' }}
        >
          지출결의서 작성
        </Button>
      </Box>

      {/* 탭 */}
      <Paper sx={{ mb: 2, boxShadow: '0 2px 8px rgba(0,0,0,0.1)', borderRadius: 2 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          sx={{
            '& .MuiTab-root': {
              textTransform: 'none',
              fontSize: '0.8rem',
              fontWeight: 600,
              py: 1.5,
              px: 3,
            },
          }}
        >
          <Tab label="요청한 지출결의서" />
          <Tab label="받은 지출결의서" />
        </Tabs>
      </Paper>
        
      {/* 지출결의서 목록 */}
      <Paper sx={{ boxShadow: '0 2px 8px rgba(0,0,0,0.1)', borderRadius: 2 }}>
        {loading ? (
          <Box display="flex" justifyContent="center" alignItems="center" minHeight={200}>
            <CircularProgress size={18} />
          </Box>
        ) : (
          <>
            {expenses.length === 0 ? (
              <Box display="flex" justifyContent="center" alignItems="center" minHeight={200}>
                <Typography variant="body1" color="text.secondary">
                  지출결의서가 없습니다.
                </Typography>
              </Box>
            ) : (
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableRow>
                                            <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>바우처번호</TableCell>
                                             <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>공급업체</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>부서</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>상태</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600, minWidth: 180 }}>우선순위</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>총합계</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>작성일</TableCell>
                      <TableCell sx={{ fontSize: '0.7rem', fontWeight: 600 }}>작업</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {expenses.map((expense) => (
                      <TableRow key={expense.id}>
                        <TableCell>
                          <Typography variant="body2" sx={{ fontWeight: 600, fontSize: '0.8rem' }}>
                            {expense.voucher_no || '자동생성'}
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ fontSize: '0.8rem' }}>{expense.company?.name || '미지정'}</TableCell>
                        <TableCell sx={{ fontSize: '0.8rem' }}>{expense.department || '-'}</TableCell>
                        <TableCell>
                          <Chip
                            label={getStatusText(expense.status)}
                            size="small"
                            color={
                              expense.status === 'approved' ? 'success' :
                              expense.status === 'rejected' ? 'error' :
                              expense.status === 'pending' ? 'warning' : 'default'
                            }
                            sx={{ fontSize: '0.65rem' }}
                          />
                        </TableCell>
                        <TableCell>
                          <Chip
                            label={getPriorityText(expense.priority)}
                            size="small"
                            color={
                              expense.priority === 'high' ? 'error' :
                              expense.priority === 'medium' ? 'warning' : 'info'
                            }
                            sx={{ 
                              fontSize: '0.6rem',
                              height: 'auto',
                              '& .MuiChip-label': {
                                padding: '4px 8px',
                                whiteSpace: 'normal',
                                lineHeight: 1.2
                              }
                            }}
                          />
                        </TableCell>
                        <TableCell>
                          <Typography variant="body2" sx={{ fontWeight: 600, fontSize: '0.8rem' }}>
                            ₹{expense.grand_total.toLocaleString()}
                          </Typography>
                        </TableCell>
                        <TableCell sx={{ fontSize: '0.8rem' }}>{formatDate(expense.created_at)}</TableCell>
                        <TableCell>
                          <Box display="flex" gap={0.5}>
                            <IconButton
                              size="small"
                              onClick={() => handleViewDialogOpen(expense)}
                              sx={{ color: '#1976d2' }}
                            >
                              <ViewIcon fontSize="small" />
                            </IconButton>
                            {expense.status === 'draft' && (
                              <>
                                <IconButton
                                  size="small"
                                  onClick={() => {
                                    setEditingExpense(expense);
                                                                         setFormData({
                                       voucher_no: expense.voucher_no || '',
                                       company_id: expense.company_id?.toString() || '',
                                       department: expense.department || '',
                                       priority: expense.priority,
                                       approver_id: expense.approver_id.toString(),
                                       payment_date: expense.payment_date || '',
                                       payment_status: expense.payment_status || '',
                                       remarks: expense.remarks,
                                       igst_rate: 18,
                                       cgst_rate: 9,
                                       sgst_rate: 9,
                                       tds_rate: 1,
                                       items: expense.Items || []
                                     });
                                    setDialogOpen(true);
                                  }}
                                  sx={{ color: '#ff9800' }}
                                >
                                  <EditIcon fontSize="small" />
                                </IconButton>
                                <IconButton
                                  size="small"
                                  onClick={() => handleDeleteDialogOpen(expense)}
                                  sx={{ color: '#f44336' }}
                                >
                                  <DeleteIcon fontSize="small" />
                                </IconButton>
                              </>
                            )}
                            {tabValue === 1 && expense.status === 'pending' && (
                              <>
                                <IconButton
                                  size="small"
                                  onClick={() => handleApproveDialogOpen(expense)}
                                  sx={{ color: '#4caf50' }}
                                >
                                  <ApproveIcon fontSize="small" />
                                </IconButton>
                                <IconButton
                                  size="small"
                                  onClick={() => handleApproveDialogOpen(expense)}
                                  sx={{ color: '#f44336' }}
                                >
                                  <RejectIcon fontSize="small" />
                                </IconButton>
                              </>
                            )}
                          </Box>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </>
        )}
      </Paper>

      {/* 지출결의서 작성/수정 다이얼로그 */}
      <Dialog 
        open={dialogOpen} 
        onClose={handleDialogClose} 
        maxWidth="lg" 
        fullWidth
      >
        <Box sx={{ 
          p: 3, 
          backgroundColor: '#fff',
          minHeight: '600px',
          fontFamily: '"Noto Sans KR", "Malgun Gothic", sans-serif',
          lineHeight: 1.05,
          '& .MuiTypography-root': { lineHeight: 1.05 },
          '& .MuiTableCell-root': { lineHeight: 1.05, py: 0.8 }
        }}>
          {/* 문서 헤더 */}
          <Box sx={{ 
            textAlign: 'center', 
            mb: 4,
            borderBottom: '3px solid #1976d2',
            pb: 2
          }}>
            <Typography variant="h4" sx={{ 
              fontWeight: 'bold', 
              fontSize: '1.5rem',
              color: '#1976d2',
              mb: 1
            }}>
              지출결의서 (EXPENSE VOUCHER)
            </Typography>
            <Typography variant="body2" sx={{ 
              color: '#666',
              fontSize: '0.8rem'
            }}>
              Electronic Expense Request Form
            </Typography>
          </Box>

          {/* 문서 정보 */}
          <Box sx={{ mb: 3 }}>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <Paper sx={{ p: 2, backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
                  <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
                    바우처 번호: {formData.voucher_no || `EXP-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#666' }}>
                    작성일자: {new Date().toLocaleDateString('ko-KR')}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={6}>
                <Paper sx={{ p: 2, backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
                  <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
                    부서: {formData.department || '미지정'}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#666' }}>
                    우선순위: {getPriorityText(formData.priority)}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>
          </Box>

          {/* 협력회사 선택 및 기본 정보 */}
          <Box sx={{ mb: 3 }}>
                            <Typography variant="h6" sx={{ 
                  fontWeight: 'bold', 
                  mb: 2,
                  color: '#333',
                  borderLeft: '4px solid #1976d2',
                  pl: 2
                }}>
                  1. 공급업체 정보
                </Typography>
            
            <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #ddd' }}>
              <Table>
                <TableBody>
                  <TableRow>
                                         <TableCell sx={{ 
                       backgroundColor: '#f5f5f5', 
                       fontWeight: 'bold',
                       width: '150px',
                       border: '1px solid #ddd'
                     }}>
                       공급업체 선택 *
                     </TableCell>
                    <TableCell sx={{ border: '1px solid #ddd' }}>
                      <FormControl fullWidth size="small">
                        <Select
                          value={formData.company_id}
                          onChange={(e) => {
                            const companyId = e.target.value;
                            setFormData({ ...formData, company_id: companyId });
                            if (companyId) {
                              const selectedCompany = companies.find(c => c.id.toString() === companyId);
                              if (selectedCompany) {
                                console.log('선택된 회사:', selectedCompany);
                              }
                            }
                          }}
                          sx={{ 
                            '& .MuiOutlinedInput-root': { 
                              fontSize: '0.9rem',
                              '& fieldset': { border: 'none' }
                            }
                          }}
                        >
                                                     <MenuItem value="">공급업체를 선택하세요</MenuItem>
                          {companies.map((company) => (
                            <MenuItem key={company.id} value={company.id.toString()}>
                              {company.name}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ 
                      backgroundColor: '#f5f5f5', 
                      fontWeight: 'bold',
                      border: '1px solid #ddd'
                    }}>
                      부서
                    </TableCell>
                    <TableCell sx={{ border: '1px solid #ddd' }}>
                      <TextField
                        fullWidth
                        size="small"
                        value={formData.department}
                        onChange={(e) => setFormData({ ...formData, department: e.target.value })}
                        placeholder="부서명을 입력하세요"
                        sx={{ 
                          '& .MuiOutlinedInput-root': { 
                            fontSize: '0.9rem',
                            '& fieldset': { border: 'none' }
                          }
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>

          {/* 지출 항목 테이블 */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="h6" sx={{ 
              fontWeight: 'bold', 
              mb: 2,
              color: '#333',
              borderLeft: '4px solid #1976d2',
              pl: 2
            }}>
              2. 지출 항목 상세
            </Typography>
            
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="body2" sx={{ color: '#666', fontSize: '0.85rem' }}>
                * 마지막 항목에 내용 입력 시 자동으로 새 라인이 추가됩니다
              </Typography>
              <Button
                variant="outlined"
                size="small"
                onClick={addItem}
                startIcon={<AddIcon />}
                sx={{ 
                  fontSize: '0.75rem', 
                  textTransform: 'none',
                  borderColor: '#1976d2',
                  color: '#1976d2',
                  '&:hover': {
                    borderColor: '#145ea8',
                    backgroundColor: 'rgba(25, 118, 210, 0.04)'
                  }
                }}
              >
                라인 추가
              </Button>
            </Box>
            
            <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #ddd' }}>
              <Table size="small">
                <TableHead>
                  <TableRow sx={{ backgroundColor: '#f8f9fa' }}>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '8%',
                      border: '1px solid #ddd',
                      textAlign: 'center'
                    }}>No.</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '15%',
                      border: '1px solid #ddd'
                    }}>송장 날짜</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '25%',
                      border: '1px solid #ddd'
                    }}>품목/설명</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '10%',
                      border: '1px solid #ddd'
                    }}>수량</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '12%',
                      border: '1px solid #ddd'
                    }}>단가</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '12%',
                      border: '1px solid #ddd'
                    }}>합계</TableCell>
                    <TableCell sx={{ 
                      fontSize: '0.75rem', 
                      fontWeight: 600, 
                      width: '8%',
                      border: '1px solid #ddd'
                    }}>작업</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {formData.items.map((item, index) => (
                    <TableRow key={item.id}>
                      <TableCell sx={{ 
                        textAlign: 'center', 
                        fontWeight: 'bold',
                        border: '1px solid #ddd',
                        backgroundColor: '#fafafa'
                      }}>
                        {index + 1}
                      </TableCell>
                      <TableCell sx={{ border: '1px solid #ddd' }}>
                        <TextField
                          type="date"
                          size="small"
                          value={item.invoice_date}
                          onChange={(e) => updateItem(index, 'invoice_date', e.target.value)}
                          InputProps={{ 
                            style: { fontSize: '0.75rem' },
                            sx: { '& fieldset': { border: 'none' } }
                          }}
                        />
                      </TableCell>
                      <TableCell sx={{ border: '1px solid #ddd' }}>
                        <TextField
                          fullWidth
                          size="small"
                          value={item.product_name}
                          onChange={(e) => updateItem(index, 'product_name', e.target.value)}
                          placeholder="품목명"
                          sx={{ mb: 1 }}
                          InputProps={{ 
                            style: { fontSize: '0.75rem' },
                            sx: { '& fieldset': { border: 'none' } }
                          }}
                        />
                        <TextField
                          fullWidth
                          size="small"
                          value={item.description}
                          onChange={(e) => updateItem(index, 'description', e.target.value)}
                          placeholder="설명 (선택사항)"
                          InputProps={{ 
                            style: { fontSize: '0.75rem' },
                            sx: { '& fieldset': { border: 'none' } }
                          }}
                        />
                      </TableCell>
                      <TableCell sx={{ border: '1px solid #ddd' }}>
                        <TextField
                          type="number"
                          size="small"
                          value={item.quantity}
                          onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value) || 1)}
                          inputProps={{ min: 1, style: { fontSize: '0.75rem' } }}
                          sx={{ width: 80 }}
                          InputProps={{ sx: { '& fieldset': { border: 'none' } } }}
                        />
                      </TableCell>
                      <TableCell sx={{ border: '1px solid #ddd' }}>
                        <TextField
                          type="number"
                          size="small"
                          value={item.unit_price}
                          onChange={(e) => updateItem(index, 'unit_price', parseFloat(e.target.value) || 0)}
                          inputProps={{ min: 0, step: 0.01, style: { fontSize: '0.75rem' } }}
                          sx={{ width: 100 }}
                          InputProps={{ sx: { '& fieldset': { border: 'none' } } }}
                        />
                      </TableCell>
                      <TableCell sx={{ 
                        border: '1px solid #ddd',
                        backgroundColor: '#f8f9fa',
                        textAlign: 'center'
                      }}>
                        <Typography variant="body2" sx={{ fontWeight: 600, fontSize: '0.8rem' }}>
                          ₹{item.total_price.toLocaleString()}
                        </Typography>
                      </TableCell>
                      <TableCell sx={{ border: '1px solid #ddd', textAlign: 'center' }}>
                        {formData.items.length > 1 && (
                          <IconButton
                            size="small"
                            onClick={() => removeItem(index)}
                            sx={{ 
                              color: '#f44336',
                              '&:hover': { backgroundColor: 'rgba(244, 67, 54, 0.04)' }
                            }}
                          >
                            <DeleteIcon fontSize="small" />
                          </IconButton>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Box>

          {/* 합계 계산 섹션 */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="h6" sx={{ 
              fontWeight: 'bold', 
              mb: 2,
              color: '#333',
              borderLeft: '4px solid #1976d2',
              pl: 2
            }}>
              3. 합계 및 세금 계산
            </Typography>
            
            {/* 세금 비율 입력 */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="body2" sx={{ fontWeight: 600, mb: 2, color: '#333' }}>
                세금 비율 설정 (%)
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={12} md={3}>
                  <TextField
                    fullWidth
                    size="small"
                    label="IGST 비율"
                    type="number"
                    value={formData.igst_rate}
                    onChange={(e) => setFormData({ ...formData, igst_rate: parseFloat(e.target.value) || 0 })}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    sx={{ 
                      '& .MuiOutlinedInput-root': { fontSize: '0.85rem' }
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={3}>
                  <TextField
                    fullWidth
                    size="small"
                    label="CGST 비율"
                    type="number"
                    value={formData.cgst_rate}
                    onChange={(e) => setFormData({ ...formData, cgst_rate: parseFloat(e.target.value) || 0 })}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    sx={{ 
                      '& .MuiOutlinedInput-root': { fontSize: '0.85rem' }
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={3}>
                  <TextField
                    fullWidth
                    size="small"
                    label="SGST 비율"
                    type="number"
                    value={formData.sgst_rate}
                    onChange={(e) => setFormData({ ...formData, sgst_rate: parseFloat(e.target.value) || 0 })}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    sx={{ 
                      '& .MuiOutlinedInput-root': { fontSize: '0.85rem' }
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={3}>
                  <TextField
                    fullWidth
                    size="small"
                    label="TDS 비율"
                    type="number"
                    value={formData.tds_rate}
                    onChange={(e) => setFormData({ ...formData, tds_rate: parseFloat(e.target.value) || 0 })}
                    inputProps={{ min: 0, max: 100, step: 0.01 }}
                    sx={{ 
                      '& .MuiOutlinedInput-root': { fontSize: '0.85rem' }
                    }}
                  />
                </Grid>
              </Grid>
            </Box>
            
            <Grid container spacing={2}>
              <Grid item xs={12} md={3}>
                <Paper sx={{ 
                  p: 2, 
                  backgroundColor: '#f8f9fa', 
                  borderRadius: 2, 
                  textAlign: 'center',
                  border: '1px solid #e0e0e0'
                }}>
                  <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                    총 금액 (A)
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#333' }}>
                    ₹{calculateTotal().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={12} md={3}>
                <Paper sx={{ 
                  p: 2, 
                  backgroundColor: '#e3f2fd', 
                  borderRadius: 2, 
                  textAlign: 'center',
                  border: '1px solid #bbdefb'
                }}>
                  <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                    IGST (B) - {formData.igst_rate}%
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#1976d2' }}>
                    ₹{calculateIGST().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={12} md={3}>
                <Paper sx={{ 
                  p: 2, 
                  backgroundColor: '#e8f5e8', 
                  borderRadius: 2, 
                  textAlign: 'center',
                  border: '1px solid #c8e6c9'
                }}>
                  <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                    CGST (C) - {formData.cgst_rate}%
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#2e7d32' }}>
                    ₹{calculateCGST().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={12} md={3}>
                <Paper sx={{ 
                  p: 2, 
                  backgroundColor: '#fff3e0', 
                  borderRadius: 2, 
                  textAlign: 'center',
                  border: '1px solid #ffcc02'
                }}>
                  <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                    SGST (D) - {formData.sgst_rate}%
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#f57c00' }}>
                    ₹{calculateSGST().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>
            
            <Grid container spacing={2} sx={{ mt: 2 }}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ 
                  p: 2, 
                  backgroundColor: '#fce4ec', 
                  borderRadius: 2, 
                  textAlign: 'center',
                  border: '1px solid #f8bbd9'
                }}>
                  <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                    TDS (E) - {formData.tds_rate}%
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600, color: '#c2185b' }}>
                    ₹{calculateTDS().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
              <Grid item xs={12} md={6}>
                <Paper sx={{ 
                  p: 2, 
                  background: 'linear-gradient(135deg, #1976d2 0%, #145ea8 100%)', 
                  borderRadius: 2, 
                  textAlign: 'center', 
                  color: 'white',
                  boxShadow: '0 4px 12px rgba(25, 118, 210, 0.3)'
                }}>
                  <Typography variant="body2" sx={{ opacity: 0.9, mb: 1, fontSize: '0.75rem' }}>
                    최종합계: IGST+CGST+SGST-(A-TDS)
                  </Typography>
                  <Typography variant="h5" sx={{ fontWeight: 700, fontSize: '1.2rem' }}>
                    ₹{calculateGrandTotal().toLocaleString()}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>
          </Box>

          {/* 추가 정보 */}
          <Box sx={{ mb: 3 }}>
            <Typography variant="h6" sx={{ 
              fontWeight: 'bold', 
              mb: 2,
              color: '#333',
              borderLeft: '4px solid #1976d2',
              pl: 2
            }}>
              4. 추가 정보
            </Typography>
            
            <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #ddd' }}>
              <Table>
                <TableBody>
                  <TableRow>
                    <TableCell sx={{ 
                      backgroundColor: '#f5f5f5', 
                      fontWeight: 'bold',
                      width: '150px',
                      border: '1px solid #ddd'
                    }}>
                      결제 날짜
                    </TableCell>
                    <TableCell sx={{ border: '1px solid #ddd' }}>
                      <TextField
                        fullWidth
                        size="small"
                        type="date"
                        value={formData.payment_date}
                        onChange={(e) => setFormData({ ...formData, payment_date: e.target.value })}
                        sx={{ 
                          '& .MuiOutlinedInput-root': { 
                            fontSize: '0.9rem',
                            '& fieldset': { border: 'none' }
                          }
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ 
                      backgroundColor: '#f5f5f5', 
                      fontWeight: 'bold',
                      border: '1px solid #ddd'
                    }}>
                      결제 상태
                    </TableCell>
                    <TableCell sx={{ border: '1px solid #ddd' }}>
                      <TextField
                        fullWidth
                        size="small"
                        value={formData.payment_status}
                        onChange={(e) => setFormData({ ...formData, payment_status: e.target.value })}
                        placeholder="예: 대기중, 완료, 취소"
                        sx={{ 
                          '& .MuiOutlinedInput-root': { 
                            fontSize: '0.9rem',
                            '& fieldset': { border: 'none' }
                          }
                        }}
                      />
                    </TableCell>
                  </TableRow>
                  <TableRow>
                    <TableCell sx={{ 
                      backgroundColor: '#f5f5f5', 
                      fontWeight: 'bold',
                      border: '1px solid #ddd'
                    }}>
                      비고
                    </TableCell>
                    <TableCell sx={{ border: '1px solid #ddd' }}>
                      <TextField
                        fullWidth
                        size="small"
                        value={formData.remarks}
                        onChange={(e) => setFormData({ ...formData, remarks: e.target.value })}
                        multiline
                        rows={2}
                        placeholder="추가 메모나 특이사항을 입력하세요"
                        sx={{ 
                          '& .MuiOutlinedInput-root': { 
                            fontSize: '0.9rem',
                            '& fieldset': { border: 'none' }
                          }
                        }}
                      />
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </TableContainer>
          </Box>
        </Box>
        
        <DialogActions sx={{ p: 2, borderTop: '1px solid #e0e0e0' }}>
          <Button 
            onClick={handleDialogClose}
            sx={{ 
              textTransform: 'none',
              fontSize: '0.85rem',
              color: '#666',
              '&:hover': { backgroundColor: '#f5f5f5' }
            }}
          >
            취소
          </Button>
          <Button 
            onClick={handleSubmit} 
            variant="contained"
            sx={{ 
              textTransform: 'none',
              fontSize: '0.85rem',
              backgroundColor: '#1976d2',
              '&:hover': { backgroundColor: '#145ea8' }
            }}
          >
            {editingExpense ? '수정' : '작성'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* 지출결의서 상세보기 다이얼로그 */}
      <Dialog open={viewDialogOpen} onClose={handleViewDialogClose} maxWidth="lg" fullWidth>
        <Box sx={{ 
          p: 3, 
          backgroundColor: '#fff',
          fontFamily: '"Noto Sans KR", "Malgun Gothic", sans-serif',
          lineHeight: 1.05,
          '& .MuiTypography-root': { lineHeight: 1.05 },
          '& .MuiTableCell-root': { lineHeight: 1.05, py: 0.8 }
        }}>
          {selectedExpense && (
            <>
              {/* 문서 헤더 */}
              <Box sx={{ 
                textAlign: 'center', 
                mb: 3,
                borderBottom: '3px solid #1976d2',
                pb: 2
              }}>
                <Typography variant="h5" sx={{ 
                  fontWeight: 'bold', 
                  fontSize: '1.3rem',
                  color: '#1976d2',
                  mb: 0.7,
                  lineHeight: 1.15
                }}>
                  지출결의서 상세보기
                </Typography>
                <Typography variant="body2" sx={{ color: '#666', fontSize: '0.8rem', lineHeight: 1.05 }}>
                  Expense Voucher Details
                </Typography>
              </Box>

              {/* 상단 요약 박스 */}
              <Box sx={{ mb: 3 }}>
                <Grid container spacing={2}>
                  <Grid item xs={6}>
                    <Paper sx={{ p: 2, backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
                      <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
                        바우처 번호: {selectedExpense.voucher_no || '자동생성'}
                      </Typography>
                      <Typography variant="body2" sx={{ color: '#666' }}>
                        작성일자: {formatDate(selectedExpense.created_at)}
                      </Typography>
                    </Paper>
                  </Grid>
                  <Grid item xs={6}>
                    <Paper sx={{ p: 2, backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
                      <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1, color: '#333' }}>
                        총합계: ₹{selectedExpense.grand_total.toLocaleString()}
                      </Typography>
                      <Typography variant="body2" sx={{ color: '#666' }}>
                        상태: {getStatusText(selectedExpense.status)}
                      </Typography>
                    </Paper>
                  </Grid>
                </Grid>
              </Box>

              {/* 기본 정보 */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ 
                  fontWeight: 'bold', 
                  mb: 2,
                  color: '#333',
                  borderLeft: '4px solid #1976d2',
                  pl: 2
                }}>
                  1. 기본 정보
                </Typography>
                
                <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #ddd' }}>
                  <Table>
                    <TableBody>
                      <TableRow>
                        <TableCell sx={{ 
                          backgroundColor: '#f5f5f5', 
                          fontWeight: 'bold',
                          width: '150px',
                          border: '1px solid #ddd'
                        }}>
                          요청자
                        </TableCell>
                        <TableCell sx={{ border: '1px solid #ddd' }}>
                          {selectedExpense.Requester?.username || '미지정'}
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell sx={{ 
                          backgroundColor: '#f5f5f5', 
                          fontWeight: 'bold',
                          border: '1px solid #ddd'
                        }}>
                          승인자
                        </TableCell>
                        <TableCell sx={{ border: '1px solid #ddd' }}>
                          {selectedExpense.Approver?.username || '미지정'}
                        </TableCell>
                      </TableRow>
                      <TableRow>
                                                 <TableCell sx={{ 
                           backgroundColor: '#f5f5f5', 
                           fontWeight: 'bold',
                           border: '1px solid #ddd'
                         }}>
                           공급업체
                         </TableCell>
                        <TableCell sx={{ border: '1px solid #ddd' }}>
                          {selectedExpense.company?.name || '미지정'}
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell sx={{ 
                          backgroundColor: '#f5f5f5', 
                          fontWeight: 'bold',
                          border: '1px solid #ddd'
                        }}>
                          부서
                        </TableCell>
                        <TableCell sx={{ border: '1px solid #ddd' }}>
                          {selectedExpense.department || '-'}
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell sx={{ 
                          backgroundColor: '#f5f5f5', 
                          fontWeight: 'bold',
                          border: '1px solid #ddd'
                        }}>
                          우선순위
                        </TableCell>
                        <TableCell sx={{ border: '1px solid #ddd' }}>
                          <Chip
                            label={getPriorityText(selectedExpense.priority)}
                            size="small"
                            color={
                              selectedExpense.priority === 'high' ? 'error' :
                              selectedExpense.priority === 'medium' ? 'warning' : 'info'
                            }
                            sx={{ fontSize: '0.7rem', height: 20 }}
                          />
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Box>
              
              {/* 지출 항목 테이블 */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ 
                  fontWeight: 'bold', 
                  mb: 2,
                  color: '#333',
                  borderLeft: '4px solid #1976d2',
                  pl: 2
                }}>
                  2. 지출 항목
                </Typography>
                
                <TableContainer component={Paper} elevation={0} sx={{ border: '1px solid #ddd' }}>
                  <Table size="small">
                    <TableHead>
                      <TableRow sx={{ backgroundColor: '#f8f9fa' }}>
                        <TableCell sx={{ 
                          fontSize: '0.75rem', 
                          fontWeight: 600,
                          border: '1px solid #ddd'
                        }}>품목/설명</TableCell>
                        <TableCell sx={{ 
                          fontSize: '0.75rem', 
                          fontWeight: 600,
                          border: '1px solid #ddd'
                        }}>수량</TableCell>
                        <TableCell sx={{ 
                          fontSize: '0.75rem', 
                          fontWeight: 600,
                          border: '1px solid #ddd'
                        }}>단가</TableCell>
                        <TableCell sx={{ 
                          fontSize: '0.75rem', 
                          fontWeight: 600,
                          border: '1px solid #ddd'
                        }}>합계</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {selectedExpense.Items?.map((item) => (
                        <TableRow key={item.id}>
                          <TableCell sx={{ border: '1px solid #ddd' }}>
                            <Typography variant="body2" sx={{ fontWeight: 600, fontSize: '0.8rem' }}>
                              {item.product_name}
                            </Typography>
                            {item.description && (
                              <Typography variant="caption" color="text.secondary" sx={{ fontSize: '0.7rem' }}>
                                {item.description}
                              </Typography>
                            )}
                          </TableCell>
                          <TableCell sx={{ border: '1px solid #ddd', textAlign: 'center' }}>
                            {item.quantity}
                          </TableCell>
                          <TableCell sx={{ border: '1px solid #ddd', textAlign: 'right' }}>
                            ₹{item.unit_price.toLocaleString()}
                          </TableCell>
                          <TableCell sx={{ 
                            border: '1px solid #ddd', 
                            textAlign: 'right',
                            backgroundColor: '#f8f9fa',
                            fontWeight: 600
                          }}>
                            ₹{item.total_price.toLocaleString()}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Box>

              {/* 세금 계산 요약 */}
              <Box sx={{ mb: 3 }}>
                <Typography variant="h6" sx={{ 
                  fontWeight: 'bold', 
                  mb: 2,
                  color: '#333',
                  borderLeft: '4px solid #1976d2',
                  pl: 2
                }}>
                  3. 세금 계산 요약
                </Typography>
                
                <Grid container spacing={2}>
                  <Grid item xs={12} md={3}>
                    <Paper sx={{ 
                      p: 2, 
                      backgroundColor: '#f8f9fa', 
                      borderRadius: 2, 
                      textAlign: 'center',
                      border: '1px solid #e0e0e0'
                    }}>
                      <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                        총 금액
                      </Typography>
                      <Typography variant="h6" sx={{ fontWeight: 600, color: '#333' }}>
                        ₹{selectedExpense.total_amount.toLocaleString()}
                      </Typography>
                    </Paper>
                  </Grid>
                  <Grid item xs={12} md={3}>
                    <Paper sx={{ 
                      p: 2, 
                      backgroundColor: '#e3f2fd', 
                      borderRadius: 2, 
                      textAlign: 'center',
                      border: '1px solid #bbdefb'
                    }}>
                      <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                        IGST (18%)
                      </Typography>
                      <Typography variant="h6" sx={{ fontWeight: 600, color: '#1976d2' }}>
                        ₹{selectedExpense.igst_amount.toLocaleString()}
                      </Typography>
                    </Paper>
                  </Grid>
                  <Grid item xs={12} md={3}>
                    <Paper sx={{ 
                      p: 2, 
                      backgroundColor: '#e8f5e8', 
                      borderRadius: 2, 
                      textAlign: 'center',
                      border: '1px solid #c8e6c9'
                    }}>
                      <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 1 }}>
                        CGST (9%)
                      </Typography>
                      <Typography variant="h6" sx={{ fontWeight: 600, color: '#2e7d32' }}>
                        ₹{selectedExpense.cgst_amount.toLocaleString()}
                      </Typography>
                    </Paper>
                  </Grid>
                  <Grid item xs={12} md={3}>
                    <Paper sx={{ 
                      p: 2, 
                      background: 'linear-gradient(135deg, #1976d2 0%, #145ea8 100%)', 
                      borderRadius: 2, 
                      textAlign: 'center', 
                      color: 'white',
                      boxShadow: '0 4px 12px rgba(25, 118, 210, 0.3)'
                    }}>
                      <Typography variant="body2" sx={{ opacity: 0.9, mb: 1, fontSize: '0.75rem' }}>
                        총합계
                      </Typography>
                      <Typography variant="h6" sx={{ fontWeight: 700, fontSize: '1.1rem' }}>
                        ₹{selectedExpense.grand_total.toLocaleString()}
                      </Typography>
                    </Paper>
                  </Grid>
                </Grid>
              </Box>
              
              {/* 비고 */}
              {selectedExpense.remarks && (
                <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ 
                    fontWeight: 'bold', 
                    mb: 2,
                    color: '#333',
                    borderLeft: '4px solid #1976d2',
                    pl: 2
                  }}>
                    4. 비고
                  </Typography>
                  
                  <Paper sx={{ p: 2, backgroundColor: '#f8f9fa', border: '1px solid #e0e0e0' }}>
                    <Typography variant="body2" sx={{ color: '#333', fontSize: '0.85rem' }}>
                      {selectedExpense.remarks}
                    </Typography>
                  </Paper>
                </Box>
              )}
            </Box>
          )}
        </Box>
        
        <DialogActions sx={{ p: 2, borderTop: '1px solid #e0e0e0' }}>
          <Button 
            onClick={handleViewDialogClose}
            sx={{ 
              textTransform: 'none',
              fontSize: '0.85rem',
              color: '#666',
              '&:hover': { backgroundColor: '#f5f5f5' }
            }}
          >
            닫기
          </Button>
        </DialogActions>
      </Dialog>

      {/* 삭제 확인 다이얼로그 */}
      <Dialog open={deleteDialogOpen} onClose={handleDeleteDialogClose}>
        <DialogTitle sx={{ fontSize: '0.85rem', fontWeight: 700, pb: 1 }}>삭제 확인</DialogTitle>
        <DialogContent>
          <Typography>
            정말로 이 지출결의서를 삭제하시겠습니까?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleDeleteDialogClose}>취소</Button>
          <Button onClick={handleDelete} color="error" variant="contained">
            삭제
          </Button>
        </DialogActions>
      </Dialog>

      {/* 승인/거부 다이얼로그 */}
      <Dialog open={approveDialogOpen} onClose={handleApproveDialogClose}>
        <DialogTitle sx={{ fontSize: '0.85rem', fontWeight: 700, pb: 1 }}>승인/거부</DialogTitle>
        <DialogContent>
          <Typography>
            이 지출결의서를 승인하거나 거부하시겠습니까?
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleApproveDialogClose}>취소</Button>
          <Button onClick={() => handleApprove('rejected')} color="error" variant="contained">
            거부
          </Button>
          <Button onClick={() => handleApprove('approved')} color="success" variant="contained">
            승인
          </Button>
        </DialogActions>
      </Dialog>

      {/* 스낵바 */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
      >
        <Alert onClose={handleSnackbarClose} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default ExpensePage;
